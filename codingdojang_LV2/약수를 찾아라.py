"""
약수를 모두 찾는 수학 문제를 풀다가 지친 X는 컴퓨터의 도움을 받아 문제를 풀어 보기로 하였다. 하지만 계산기를 이용하자니 계산기로 하고 싶지만 찾기도 어려우며, 쉽게 찾아낼 수도 없었다.
풀이에 지친 그는 결국 약수들이 가지고 있는 특징을 찾아 결국 몇시간에 걸쳐 복잡한 수라도 약수를 찾아줄 수 있고 개수도 알려주는 프로그램을 짜게 된다.
다음은 약수를 얻기 위한 입력과 출력 예제들이다.

입력 1
24

출력 1
{ 1, 2, 3, 4, 6, 8, 12, 24}
약수의 개수는 8개 입니다.

입력 2
36

출력 2
{ 1, 2, 3, 4, 6, 9, 12, 18, 36 }
약수의 개수는 9개 입니다.

입력 3
2468013579

출력 3
{ 1, 3, 9, 61, 183, 549, 4495471, 13486413, 40459239, 274223731, 822671193, 2468013579 }
약수의 개수는 12개 입니다.

사용한 소스코드를 풀이에 넣어 입력과 출력이 나왔음을 보이고,
소스코드를 디버깅하여 123456789를 입력해 출력된 결과를 '{ a, b, ... } / 약수의 개수는 ~개 입니다' 형식으로 하시오.
"""

"""
#숫자가　커질수록　많이　느려짐
number = int(input('입력：'))
prime = [1]
for i in range(2, (number//2)+1):
    if number % i == 0:
        prime.append(i)
prime.append(number)
print(prime)
print('약수의 개수는 {} 개 입니다．'.format(len(prime)))
"""

# 다른방법，math사용

import math

n = int(input('입력'))

def divisor_make(n):
    divisor_list = []
    for i in range(1, int(math.sqrt(n))):#제곱근
        if n % i == 0:
            divisor_list.append(i)
            divisor_list.append(n//i) #１～n의　제곱근까지　나누어　떨어지면　그　수와　몫을　추가함．（나눈　몫으로도　나누어　떨어질　것이므로）

    print(sorted(divisor_list))
    print("약수의 개수는 %d개 입니다." %len(divisor_list))

divisor_make(n)
